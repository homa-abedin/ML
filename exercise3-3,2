{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Dx8VzZUf3LMg"
      },
      "source": [
        "<div style=\"direction:rtl;text-align:right;font-family:Tahoma\">\n",
        "اگر روی گوگل کولب اجرا میکنید این خطوط را از حالت کامنت خارج نمائید.\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PFqqYBeE3LMo",
        "outputId": "8576e1e3-4b37-437b-a2b1-3e2635b94e22"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2024-01-08 19:09:09--  https://raw.githubusercontent.com/Alireza-Akhavan/SRU-deeplearning-workshop/master/dataset.py\n",
            "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n",
            "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 917 [text/plain]\n",
            "Saving to: ‘dataset.py’\n",
            "\n",
            "dataset.py          100%[===================>]     917  --.-KB/s    in 0s      \n",
            "\n",
            "2024-01-08 19:09:09 (37.1 MB/s) - ‘dataset.py’ saved [917/917]\n",
            "\n",
            "--2024-01-08 19:09:10--  https://github.com/Alireza-Akhavan/SRU-deeplearning-workshop/raw/master/dataset/Data_hoda_full.mat\n",
            "Resolving github.com (github.com)... 192.30.255.113\n",
            "Connecting to github.com (github.com)|192.30.255.113|:443... connected.\n",
            "HTTP request sent, awaiting response... 301 Moved Permanently\n",
            "Location: https://github.com/Alireza-Akhavan/deeplearning-tensorflow2-notebooks/raw/master/dataset/Data_hoda_full.mat [following]\n",
            "--2024-01-08 19:09:10--  https://github.com/Alireza-Akhavan/deeplearning-tensorflow2-notebooks/raw/master/dataset/Data_hoda_full.mat\n",
            "Reusing existing connection to github.com:443.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://raw.githubusercontent.com/Alireza-Akhavan/deeplearning-tensorflow2-notebooks/master/dataset/Data_hoda_full.mat [following]\n",
            "--2024-01-08 19:09:10--  https://raw.githubusercontent.com/Alireza-Akhavan/deeplearning-tensorflow2-notebooks/master/dataset/Data_hoda_full.mat\n",
            "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n",
            "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 3989009 (3.8M) [application/octet-stream]\n",
            "Saving to: ‘dataset/Data_hoda_full.mat’\n",
            "\n",
            "Data_hoda_full.mat  100%[===================>]   3.80M  --.-KB/s    in 0.05s   \n",
            "\n",
            "2024-01-08 19:09:10 (80.3 MB/s) - ‘dataset/Data_hoda_full.mat’ saved [3989009/3989009]\n",
            "\n"
          ]
        }
      ],
      "source": [
        "!wget https://raw.githubusercontent.com/Alireza-Akhavan/SRU-deeplearning-workshop/master/dataset.py\n",
        "!mkdir dataset\n",
        "!wget https://github.com/Alireza-Akhavan/SRU-deeplearning-workshop/raw/master/dataset/Data_hoda_full.mat -P dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "yY9xnnzS3LMp"
      },
      "outputs": [],
      "source": [
        "# 1. Import libraries and modules\n",
        "from tensorflow import keras\n",
        "from keras import layers\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, Dropout, BatchNormalization\n",
        "import numpy as np\n",
        "from dataset import load_hoda\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "ymMEyIOl3LMp"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Load pre-shuffled HODA data into train and test sets\n",
        "X_train, y_train, X_test, y_test = load_hoda(\n",
        "                                            training_sample_size=3500,\n",
        "                                            test_sample_size=400,size=28)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "IM_j2fXs3LMp"
      },
      "outputs": [],
      "source": [
        "# Preprocess input data\n",
        "'''standard our data values to the range [-1, 1]'''\n",
        "X_train = X_train.astype('float32')\n",
        "X_test = X_test.astype('float32')\n",
        "X_train = (X_train - 127.5) / 127.5\n",
        "X_test = (X_test - 127.5) / 127.5"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "vic2hImJ3LMp"
      },
      "outputs": [],
      "source": [
        "# Reshape to original image shape (n x 784)  ==> (n x 28 x 28 x 1)\n",
        "X_train = X_train.reshape(-1,28,28,1)\n",
        "X_test = X_test.reshape(-1,28,28,1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "MVVPgee03LMq"
      },
      "outputs": [],
      "source": [
        "# 5. Define model architecture\n",
        "model = Sequential()\n",
        "model.add(layers.Conv2D(32, (3, 3), activation='relu',\n",
        "                        input_shape=(28, 28, 1)))\n",
        "model.add(BatchNormalization())\n",
        "model.add(layers.MaxPooling2D((2, 2)))\n",
        "model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n",
        "model.add(BatchNormalization())\n",
        "model.add(layers.MaxPooling2D((2, 2)))\n",
        "model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n",
        "model.add(BatchNormalization())\n",
        "model.add(layers.Flatten())\n",
        "model.add(layers.Dense(64, activation='relu'))\n",
        "model.add(BatchNormalization())\n",
        "model.add(Dropout(0.5))\n",
        "model.add(layers.Dense(10, activation='softmax'))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**جواب سوال 2-3**\n",
        "\n",
        "***ReduceLROnPlateau***"
      ],
      "metadata": {
        "id": "zwer9uT9gQMx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "reduce_lr= keras.callbacks.ReduceLROnPlateau(\n",
        "    monitor='val_loss', factor=0.1, patient=2, min_lr=0.000001)"
      ],
      "metadata": {
        "id": "1F1HU-yU3m97"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**جواب سوال 3-3**\n",
        "\n",
        "***on_epoch_end***"
      ],
      "metadata": {
        "id": "C-jx60ODgOrH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import keras\n",
        "\n",
        "class myCallback(keras.callbacks.Callback):\n",
        "    def on_epoch_end(self,epoch,logs={}):\n",
        "      print (logs)\n",
        "      if(logs.get('accuracy')>=0.7):\n",
        "        print(\"stop Training\")\n",
        "        self.model.stop_training= True\n",
        "callbacks= myCallback()\n",
        "\n"
      ],
      "metadata": {
        "id": "A3dzED9QAiOG"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hpug_zP2GhQV"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NODckEns3LMq",
        "outputId": "c9957682-0d21-4d0c-92cd-30484ecfb843"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "11/11 [==============================] - 4s 35ms/step - loss: 0.0056 - sparse_categorical_accuracy: 0.9989 - val_loss: 0.1225 - val_sparse_categorical_accuracy: 0.9714 - lr: 0.0010\n",
            "Epoch 2/100\n",
            "11/11 [==============================] - 0s 15ms/step - loss: 0.0068 - sparse_categorical_accuracy: 0.9986 - val_loss: 0.0892 - val_sparse_categorical_accuracy: 0.9757 - lr: 0.0010\n",
            "Epoch 3/100\n",
            "11/11 [==============================] - 0s 14ms/step - loss: 0.0038 - sparse_categorical_accuracy: 0.9996 - val_loss: 0.0693 - val_sparse_categorical_accuracy: 0.9814 - lr: 0.0010\n",
            "Epoch 4/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 0.0081 - sparse_categorical_accuracy: 0.9982 - val_loss: 0.0947 - val_sparse_categorical_accuracy: 0.9786 - lr: 0.0010\n",
            "Epoch 5/100\n",
            "11/11 [==============================] - 0s 18ms/step - loss: 0.0040 - sparse_categorical_accuracy: 0.9993 - val_loss: 0.0830 - val_sparse_categorical_accuracy: 0.9800 - lr: 0.0010\n",
            "Epoch 6/100\n",
            "11/11 [==============================] - 0s 22ms/step - loss: 0.0131 - sparse_categorical_accuracy: 0.9971 - val_loss: 0.0913 - val_sparse_categorical_accuracy: 0.9786 - lr: 0.0010\n",
            "Epoch 7/100\n",
            "11/11 [==============================] - 0s 26ms/step - loss: 0.0066 - sparse_categorical_accuracy: 0.9982 - val_loss: 0.1056 - val_sparse_categorical_accuracy: 0.9700 - lr: 0.0010\n",
            "Epoch 8/100\n",
            "11/11 [==============================] - 0s 14ms/step - loss: 0.0042 - sparse_categorical_accuracy: 0.9993 - val_loss: 0.1137 - val_sparse_categorical_accuracy: 0.9671 - lr: 0.0010\n",
            "Epoch 9/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 0.0054 - sparse_categorical_accuracy: 0.9993 - val_loss: 0.0746 - val_sparse_categorical_accuracy: 0.9857 - lr: 0.0010\n",
            "Epoch 10/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 0.0034 - sparse_categorical_accuracy: 0.9993 - val_loss: 0.0765 - val_sparse_categorical_accuracy: 0.9843 - lr: 0.0010\n",
            "Epoch 11/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 0.0041 - sparse_categorical_accuracy: 0.9993 - val_loss: 0.0625 - val_sparse_categorical_accuracy: 0.9814 - lr: 0.0010\n",
            "Epoch 12/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 0.0022 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0601 - val_sparse_categorical_accuracy: 0.9771 - lr: 0.0010\n",
            "Epoch 13/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 0.0020 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0565 - val_sparse_categorical_accuracy: 0.9786 - lr: 0.0010\n",
            "Epoch 14/100\n",
            "11/11 [==============================] - 0s 11ms/step - loss: 0.0033 - sparse_categorical_accuracy: 0.9993 - val_loss: 0.0522 - val_sparse_categorical_accuracy: 0.9829 - lr: 0.0010\n",
            "Epoch 15/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 0.0020 - sparse_categorical_accuracy: 0.9996 - val_loss: 0.0643 - val_sparse_categorical_accuracy: 0.9800 - lr: 0.0010\n",
            "Epoch 16/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 0.0019 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0679 - val_sparse_categorical_accuracy: 0.9800 - lr: 0.0010\n",
            "Epoch 17/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 0.0028 - sparse_categorical_accuracy: 0.9993 - val_loss: 0.0528 - val_sparse_categorical_accuracy: 0.9814 - lr: 0.0010\n",
            "Epoch 18/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 0.0023 - sparse_categorical_accuracy: 0.9996 - val_loss: 0.0586 - val_sparse_categorical_accuracy: 0.9800 - lr: 0.0010\n",
            "Epoch 19/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 0.0020 - sparse_categorical_accuracy: 0.9996 - val_loss: 0.0675 - val_sparse_categorical_accuracy: 0.9786 - lr: 0.0010\n",
            "Epoch 20/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 0.0017 - sparse_categorical_accuracy: 0.9996 - val_loss: 0.0769 - val_sparse_categorical_accuracy: 0.9800 - lr: 0.0010\n",
            "Epoch 21/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 0.0010 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0673 - val_sparse_categorical_accuracy: 0.9829 - lr: 0.0010\n",
            "Epoch 22/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 0.0011 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0585 - val_sparse_categorical_accuracy: 0.9857 - lr: 0.0010\n",
            "Epoch 23/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 7.6242e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0580 - val_sparse_categorical_accuracy: 0.9829 - lr: 0.0010\n",
            "Epoch 24/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 6.0703e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0595 - val_sparse_categorical_accuracy: 0.9843 - lr: 0.0010\n",
            "Epoch 25/100\n",
            "11/11 [==============================] - 0s 16ms/step - loss: 8.5010e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0590 - val_sparse_categorical_accuracy: 0.9843 - lr: 1.0000e-04\n",
            "Epoch 26/100\n",
            "11/11 [==============================] - 0s 16ms/step - loss: 6.4475e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0583 - val_sparse_categorical_accuracy: 0.9843 - lr: 1.0000e-04\n",
            "Epoch 27/100\n",
            "11/11 [==============================] - 0s 15ms/step - loss: 5.0874e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0579 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-04\n",
            "Epoch 28/100\n",
            "11/11 [==============================] - 0s 14ms/step - loss: 6.6749e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0574 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-04\n",
            "Epoch 29/100\n",
            "11/11 [==============================] - 0s 16ms/step - loss: 4.6886e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0569 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-04\n",
            "Epoch 30/100\n",
            "11/11 [==============================] - 0s 16ms/step - loss: 7.3040e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0562 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-04\n",
            "Epoch 31/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 4.7301e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0558 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-04\n",
            "Epoch 32/100\n",
            "11/11 [==============================] - 0s 16ms/step - loss: 4.5471e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0555 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-04\n",
            "Epoch 33/100\n",
            "11/11 [==============================] - 0s 15ms/step - loss: 6.0703e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0554 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-04\n",
            "Epoch 34/100\n",
            "11/11 [==============================] - 0s 15ms/step - loss: 4.0633e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0552 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-04\n",
            "Epoch 35/100\n",
            "11/11 [==============================] - 0s 15ms/step - loss: 4.4799e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0551 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-05\n",
            "Epoch 36/100\n",
            "11/11 [==============================] - 0s 15ms/step - loss: 6.7202e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0550 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-05\n",
            "Epoch 37/100\n",
            "11/11 [==============================] - 0s 14ms/step - loss: 7.5962e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0549 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-05\n",
            "Epoch 38/100\n",
            "11/11 [==============================] - 0s 16ms/step - loss: 4.2829e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0548 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-05\n",
            "Epoch 39/100\n",
            "11/11 [==============================] - 0s 14ms/step - loss: 4.3711e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0547 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-05\n",
            "Epoch 40/100\n",
            "11/11 [==============================] - 0s 17ms/step - loss: 5.0569e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0547 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-05\n",
            "Epoch 41/100\n",
            "11/11 [==============================] - 0s 15ms/step - loss: 5.9004e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0546 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-05\n",
            "Epoch 42/100\n",
            "11/11 [==============================] - 0s 14ms/step - loss: 5.9906e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0545 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-05\n",
            "Epoch 43/100\n",
            "11/11 [==============================] - 0s 11ms/step - loss: 5.7606e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0545 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-05\n",
            "Epoch 44/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 5.1415e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0545 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-05\n",
            "Epoch 45/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 4.4346e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0544 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 46/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 5.6991e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0544 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 47/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 4.7039e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0544 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 48/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 4.8457e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0543 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 49/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 7.6469e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0543 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 50/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 6.4174e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0543 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 51/100\n",
            "11/11 [==============================] - 0s 11ms/step - loss: 4.8002e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0543 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 52/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 4.3193e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0543 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 53/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 5.7344e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 54/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 4.9097e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 55/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 7.3266e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 56/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 4.7402e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 57/100\n",
            "11/11 [==============================] - 0s 11ms/step - loss: 4.8185e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 58/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 4.7646e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 59/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 5.1912e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 60/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 7.1096e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 61/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 5.4792e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 62/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 4.3964e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 63/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 5.1358e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 64/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 5.1127e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 65/100\n",
            "11/11 [==============================] - 0s 11ms/step - loss: 4.1674e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 66/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 4.7019e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 67/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 6.9057e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 68/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 4.7877e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 69/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 7.2116e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 70/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 5.1690e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 71/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 3.9694e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 72/100\n",
            "11/11 [==============================] - 0s 11ms/step - loss: 6.3151e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 73/100\n",
            "11/11 [==============================] - 0s 11ms/step - loss: 7.1651e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 74/100\n",
            "11/11 [==============================] - 0s 11ms/step - loss: 5.2143e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 75/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 4.4596e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 76/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 6.1478e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 77/100\n",
            "11/11 [==============================] - 0s 11ms/step - loss: 6.6869e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 78/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 5.2962e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 79/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 6.2075e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 80/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 5.4162e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 81/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 4.5562e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 82/100\n",
            "11/11 [==============================] - 0s 14ms/step - loss: 5.0187e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 83/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 5.7347e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 84/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 7.3966e-04 - sparse_categorical_accuracy: 0.9996 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 85/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 4.1909e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 86/100\n",
            "11/11 [==============================] - 0s 11ms/step - loss: 6.9786e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 87/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 5.7821e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 88/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 7.2314e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 89/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 7.6129e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 90/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 6.9902e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 91/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 4.4579e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 92/100\n",
            "11/11 [==============================] - 0s 14ms/step - loss: 4.6200e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 93/100\n",
            "11/11 [==============================] - 0s 11ms/step - loss: 5.3727e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 94/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 4.9365e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 95/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 5.3177e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 96/100\n",
            "11/11 [==============================] - 0s 11ms/step - loss: 5.0897e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 97/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 6.7151e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 98/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 6.9565e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 99/100\n",
            "11/11 [==============================] - 0s 12ms/step - loss: 6.6100e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n",
            "Epoch 100/100\n",
            "11/11 [==============================] - 0s 13ms/step - loss: 4.3271e-04 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.0542 - val_sparse_categorical_accuracy: 0.9857 - lr: 1.0000e-06\n"
          ]
        }
      ],
      "source": [
        "\n",
        "model.compile(loss='sparse_categorical_crossentropy',\n",
        "              optimizer='adam',\n",
        "              metrics=['sparse_categorical_accuracy'])\n",
        "\n",
        "# برای عملکرد on_epoch_end\n",
        "## باید حتما metric=accuracy باشد\n",
        "\n",
        "history = model.fit(X_train, y_train,\n",
        "          epochs=100, batch_size=256, validation_split=0.2, callbacks=reduce_lr)\n",
        "#reduce_lr    OR   # callbacks az myCallback"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 887
        },
        "id": "05CJFzBk3LMq",
        "outputId": "f7d2c6e3-24d4-4142-cb59-c9de175c5bd2"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "acc = history.history['sparse_categorical_accuracy']\n",
        "val_acc = history.history['val_sparse_categorical_accuracy']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "anaconda-cloud": {},
    "kernelspec": {
      "display_name": "tf2.5",
      "language": "python",
      "name": "tensorflow_25"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.10"
    },
    "nbpresent": {
      "slides": {
        "300ee14f-a043-486e-b274-7ff253907cd7": {
          "id": "300ee14f-a043-486e-b274-7ff253907cd7",
          "prev": "cb74e0bc-4513-4d13-b7f1-14c3078a7927",
          "regions": {
            "26dc3f39-a230-447c-af4c-f5e5b2fb7835": {
              "attrs": {
                "height": 0.8,
                "width": 0.8,
                "x": 0.1,
                "y": 0.1
              },
              "content": {
                "cell": "c58440a5-3f8f-4f37-9c79-6bf766209406",
                "part": "whole"
              },
              "id": "26dc3f39-a230-447c-af4c-f5e5b2fb7835"
            }
          }
        },
        "878aa53a-1444-4100-8f50-7a408191c579": {
          "id": "878aa53a-1444-4100-8f50-7a408191c579",
          "prev": null,
          "regions": {
            "a6c6843a-5ea6-4fbc-b890-3b4b8ae475b3": {
              "attrs": {
                "height": 0.8,
                "width": 0.8,
                "x": 0.1,
                "y": 0.1
              },
              "content": {
                "cell": "588ee1fa-64b5-453b-ade7-8e6b2515821c",
                "part": "whole"
              },
              "id": "a6c6843a-5ea6-4fbc-b890-3b4b8ae475b3"
            }
          }
        },
        "96ffe88e-7b50-43de-afdd-942e564f4e3e": {
          "id": "96ffe88e-7b50-43de-afdd-942e564f4e3e",
          "prev": "878aa53a-1444-4100-8f50-7a408191c579",
          "regions": {
            "b7e52e12-489a-468d-b10c-af2024fd2856": {
              "attrs": {
                "height": 0.8,
                "width": 0.8,
                "x": 0.1,
                "y": 0.1
              },
              "content": {
                "cell": "de829a92-1fb6-44ad-a2c6-fc1001e1f6e1",
                "part": "whole"
              },
              "id": "b7e52e12-489a-468d-b10c-af2024fd2856"
            }
          }
        },
        "cb74e0bc-4513-4d13-b7f1-14c3078a7927": {
          "id": "cb74e0bc-4513-4d13-b7f1-14c3078a7927",
          "prev": "96ffe88e-7b50-43de-afdd-942e564f4e3e",
          "regions": {
            "444878ee-68f3-4abb-acff-a7079b21e86d": {
              "attrs": {
                "height": 0.8,
                "width": 0.8,
                "x": 0.1,
                "y": 0.1
              },
              "content": {
                "cell": "25f3f538-1ee8-4d98-a6bb-14cbeb7a702d",
                "part": "whole"
              },
              "id": "444878ee-68f3-4abb-acff-a7079b21e86d"
            }
          }
        }
      },
      "themes": {}
    },
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}